// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: captcha.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Captcha struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid string `protobuf:"bytes,1,opt,name=vid,proto3" json:"vid,omitempty"`
	B64 string `protobuf:"bytes,2,opt,name=b64,proto3" json:"b64,omitempty"` //error err = 3;
}

func (x *Captcha) Reset() {
	*x = Captcha{}
	if protoimpl.UnsafeEnabled {
		mi := &file_captcha_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Captcha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Captcha) ProtoMessage() {}

func (x *Captcha) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Captcha.ProtoReflect.Descriptor instead.
func (*Captcha) Descriptor() ([]byte, []int) {
	return file_captcha_proto_rawDescGZIP(), []int{0}
}

func (x *Captcha) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *Captcha) GetB64() string {
	if x != nil {
		return x.B64
	}
	return ""
}

type CheckCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid string `protobuf:"bytes,4,opt,name=vid,proto3" json:"vid,omitempty"`
	Val string `protobuf:"bytes,5,opt,name=val,proto3" json:"val,omitempty"` //error err = 6;
}

func (x *CheckCap) Reset() {
	*x = CheckCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_captcha_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCap) ProtoMessage() {}

func (x *CheckCap) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCap.ProtoReflect.Descriptor instead.
func (*CheckCap) Descriptor() ([]byte, []int) {
	return file_captcha_proto_rawDescGZIP(), []int{1}
}

func (x *CheckCap) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *CheckCap) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type CheckCapRe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,7,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckCapRe) Reset() {
	*x = CheckCapRe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_captcha_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCapRe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCapRe) ProtoMessage() {}

func (x *CheckCapRe) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCapRe.ProtoReflect.Descriptor instead.
func (*CheckCapRe) Descriptor() ([]byte, []int) {
	return file_captcha_proto_rawDescGZIP(), []int{2}
}

func (x *CheckCapRe) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_captcha_proto protoreflect.FileDescriptor

var file_captcha_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0x2d, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62,
	0x36, 0x34, 0x22, 0x2e, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x22, 0x24, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x52, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x5f, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x12, 0x26, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68,
	0x61, 0x12, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x1a, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x2c, 0x0a, 0x0c, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x52, 0x65, 0x42, 0x03, 0x5a, 0x01, 0x2f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_captcha_proto_rawDescOnce sync.Once
	file_captcha_proto_rawDescData = file_captcha_proto_rawDesc
)

func file_captcha_proto_rawDescGZIP() []byte {
	file_captcha_proto_rawDescOnce.Do(func() {
		file_captcha_proto_rawDescData = protoimpl.X.CompressGZIP(file_captcha_proto_rawDescData)
	})
	return file_captcha_proto_rawDescData
}

var file_captcha_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_captcha_proto_goTypes = []interface{}{
	(*Captcha)(nil),    // 0: pb.Captcha
	(*CheckCap)(nil),   // 1: pb.CheckCap
	(*CheckCapRe)(nil), // 2: pb.CheckCapRe
}
var file_captcha_proto_depIdxs = []int32{
	0, // 0: pb.captcha.getCaptcha:input_type -> pb.Captcha
	1, // 1: pb.captcha.checkCaptcha:input_type -> pb.CheckCap
	0, // 2: pb.captcha.getCaptcha:output_type -> pb.Captcha
	2, // 3: pb.captcha.checkCaptcha:output_type -> pb.CheckCapRe
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_captcha_proto_init() }
func file_captcha_proto_init() {
	if File_captcha_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_captcha_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Captcha); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_captcha_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_captcha_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCapRe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_captcha_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_captcha_proto_goTypes,
		DependencyIndexes: file_captcha_proto_depIdxs,
		MessageInfos:      file_captcha_proto_msgTypes,
	}.Build()
	File_captcha_proto = out.File
	file_captcha_proto_rawDesc = nil
	file_captcha_proto_goTypes = nil
	file_captcha_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CaptchaClient is the client API for Captcha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CaptchaClient interface {
	GetCaptcha(ctx context.Context, in *Captcha, opts ...grpc.CallOption) (*Captcha, error)
	CheckCaptcha(ctx context.Context, in *CheckCap, opts ...grpc.CallOption) (*CheckCapRe, error)
}

type captchaClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptchaClient(cc grpc.ClientConnInterface) CaptchaClient {
	return &captchaClient{cc}
}

func (c *captchaClient) GetCaptcha(ctx context.Context, in *Captcha, opts ...grpc.CallOption) (*Captcha, error) {
	out := new(Captcha)
	err := c.cc.Invoke(ctx, "/pb.captcha/getCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaClient) CheckCaptcha(ctx context.Context, in *CheckCap, opts ...grpc.CallOption) (*CheckCapRe, error) {
	out := new(CheckCapRe)
	err := c.cc.Invoke(ctx, "/pb.captcha/checkCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptchaServer is the server API for Captcha service.
type CaptchaServer interface {
	GetCaptcha(context.Context, *Captcha) (*Captcha, error)
	CheckCaptcha(context.Context, *CheckCap) (*CheckCapRe, error)
}

// UnimplementedCaptchaServer can be embedded to have forward compatible implementations.
type UnimplementedCaptchaServer struct {
}

func (*UnimplementedCaptchaServer) GetCaptcha(context.Context, *Captcha) (*Captcha, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptcha not implemented")
}
func (*UnimplementedCaptchaServer) CheckCaptcha(context.Context, *CheckCap) (*CheckCapRe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCaptcha not implemented")
}

func RegisterCaptchaServer(s *grpc.Server, srv CaptchaServer) {
	s.RegisterService(&_Captcha_serviceDesc, srv)
}

func _Captcha_GetCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Captcha)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaServer).GetCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.captcha/GetCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaServer).GetCaptcha(ctx, req.(*Captcha))
	}
	return interceptor(ctx, in, info, handler)
}

func _Captcha_CheckCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptchaServer).CheckCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.captcha/CheckCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptchaServer).CheckCaptcha(ctx, req.(*CheckCap))
	}
	return interceptor(ctx, in, info, handler)
}

var _Captcha_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.captcha",
	HandlerType: (*CaptchaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCaptcha",
			Handler:    _Captcha_GetCaptcha_Handler,
		},
		{
			MethodName: "checkCaptcha",
			Handler:    _Captcha_CheckCaptcha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "captcha.proto",
}
